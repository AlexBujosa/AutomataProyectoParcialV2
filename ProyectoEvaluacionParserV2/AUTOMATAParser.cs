//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Users\any_c\source\repos\practica basica\ProyectoEvaluacionParserV2\ProyectoEvaluacionParserV2\AUTOMATA.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class AUTOMATAParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SEPARATOR=1, HASH_TAG=2, ASTERISK=3, GREATER_THAN=4, TEXT=5, COMMA=6, 
		SEMI=7, OPEN_BRACKET=8, CLOSE_BRACKET=9, IGNORE=10;
	public const int
		RULE_automata = 0, RULE_state = 1, RULE_transitions = 2, RULE_id = 3, 
		RULE_state_name = 4, RULE_prop = 5, RULE_initial = 6, RULE_acceptance = 7, 
		RULE_transition = 8, RULE_input = 9;
	public static readonly string[] ruleNames = {
		"automata", "state", "transitions", "id", "state_name", "prop", "initial", 
		"acceptance", "transition", "input"
	};

	private static readonly string[] _LiteralNames = {
		null, "':'", "'#'", "'*'", "'>'", null, "','", "';'", "'['", "']'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SEPARATOR", "HASH_TAG", "ASTERISK", "GREATER_THAN", "TEXT", "COMMA", 
		"SEMI", "OPEN_BRACKET", "CLOSE_BRACKET", "IGNORE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "AUTOMATA.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static AUTOMATAParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public AUTOMATAParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public AUTOMATAParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class AutomataContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(AUTOMATAParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StateContext[] state() {
			return GetRuleContexts<StateContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StateContext state(int i) {
			return GetRuleContext<StateContext>(i);
		}
		public AutomataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_automata; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAUTOMATAVisitor<TResult> typedVisitor = visitor as IAUTOMATAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAutomata(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AutomataContext automata() {
		AutomataContext _localctx = new AutomataContext(Context, State);
		EnterRule(_localctx, 0, RULE_automata);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 21;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 20;
				state();
				}
				}
				State = 23;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << HASH_TAG) | (1L << ASTERISK) | (1L << TEXT))) != 0) );
			State = 25;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(AUTOMATAParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_THAN() { return GetToken(AUTOMATAParser.GREATER_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TransitionsContext transitions() {
			return GetRuleContext<TransitionsContext>(0);
		}
		public StateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_state; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAUTOMATAVisitor<TResult> typedVisitor = visitor as IAUTOMATAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitState(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StateContext state() {
		StateContext _localctx = new StateContext(Context, State);
		EnterRule(_localctx, 2, RULE_state);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 32;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				{
				State = 27;
				id();
				State = 28;
				Match(GREATER_THAN);
				State = 29;
				transitions();
				}
				break;
			case 2:
				{
				State = 31;
				id();
				}
				break;
			}
			State = 34;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransitionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TransitionContext[] transition() {
			return GetRuleContexts<TransitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TransitionContext transition(int i) {
			return GetRuleContext<TransitionContext>(i);
		}
		public TransitionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transitions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAUTOMATAVisitor<TResult> typedVisitor = visitor as IAUTOMATAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransitions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TransitionsContext transitions() {
		TransitionsContext _localctx = new TransitionsContext(Context, State);
		EnterRule(_localctx, 4, RULE_transitions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 37;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 36;
				transition();
				}
				}
				State = 39;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==TEXT );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public State_nameContext state_name() {
			return GetRuleContext<State_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropContext prop() {
			return GetRuleContext<PropContext>(0);
		}
		public IdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAUTOMATAVisitor<TResult> typedVisitor = visitor as IAUTOMATAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdContext id() {
		IdContext _localctx = new IdContext(Context, State);
		EnterRule(_localctx, 6, RULE_id);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 42;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==HASH_TAG || _la==ASTERISK) {
				{
				State = 41;
				prop();
				}
			}

			State = 44;
			state_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class State_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(AUTOMATAParser.TEXT, 0); }
		public State_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_state_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAUTOMATAVisitor<TResult> typedVisitor = visitor as IAUTOMATAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitState_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public State_nameContext state_name() {
		State_nameContext _localctx = new State_nameContext(Context, State);
		EnterRule(_localctx, 8, RULE_state_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 46;
			Match(TEXT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InitialContext initial() {
			return GetRuleContext<InitialContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AcceptanceContext acceptance() {
			return GetRuleContext<AcceptanceContext>(0);
		}
		public PropContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAUTOMATAVisitor<TResult> typedVisitor = visitor as IAUTOMATAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropContext prop() {
		PropContext _localctx = new PropContext(Context, State);
		EnterRule(_localctx, 10, RULE_prop);
		try {
			State = 53;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 48;
				initial();
				State = 49;
				acceptance();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 51;
				initial();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 52;
				acceptance();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitialContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH_TAG() { return GetToken(AUTOMATAParser.HASH_TAG, 0); }
		public InitialContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initial; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAUTOMATAVisitor<TResult> typedVisitor = visitor as IAUTOMATAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitial(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitialContext initial() {
		InitialContext _localctx = new InitialContext(Context, State);
		EnterRule(_localctx, 12, RULE_initial);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 55;
			Match(HASH_TAG);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AcceptanceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASTERISK() { return GetToken(AUTOMATAParser.ASTERISK, 0); }
		public AcceptanceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_acceptance; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAUTOMATAVisitor<TResult> typedVisitor = visitor as IAUTOMATAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAcceptance(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AcceptanceContext acceptance() {
		AcceptanceContext _localctx = new AcceptanceContext(Context, State);
		EnterRule(_localctx, 14, RULE_acceptance);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 57;
			Match(ASTERISK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InputContext input() {
			return GetRuleContext<InputContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEPARATOR() { return GetToken(AUTOMATAParser.SEPARATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public State_nameContext[] state_name() {
			return GetRuleContexts<State_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public State_nameContext state_name(int i) {
			return GetRuleContext<State_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(AUTOMATAParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(AUTOMATAParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(AUTOMATAParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(AUTOMATAParser.COMMA, i);
		}
		public TransitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAUTOMATAVisitor<TResult> typedVisitor = visitor as IAUTOMATAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TransitionContext transition() {
		TransitionContext _localctx = new TransitionContext(Context, State);
		EnterRule(_localctx, 16, RULE_transition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 59;
			input();
			State = 60;
			Match(SEPARATOR);
			State = 76;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TEXT:
				{
				State = 61;
				state_name();
				}
				break;
			case OPEN_BRACKET:
				{
				State = 62;
				Match(OPEN_BRACKET);
				State = 70;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 63;
					state_name();
					State = 67;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 64;
						Match(COMMA);
						}
						}
						State = 69;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
					}
					State = 72;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==TEXT );
				State = 74;
				Match(CLOSE_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 81;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 78;
				Match(COMMA);
				}
				}
				State = 83;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(AUTOMATAParser.TEXT, 0); }
		public InputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_input; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAUTOMATAVisitor<TResult> typedVisitor = visitor as IAUTOMATAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInput(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputContext input() {
		InputContext _localctx = new InputContext(Context, State);
		EnterRule(_localctx, 18, RULE_input);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84;
			Match(TEXT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\f', 'Y', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', '\t', 
		'\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', '\x6', 
		'\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', '\x4', 
		'\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', '\x3', 
		'\x2', '\x6', '\x2', '\x18', '\n', '\x2', '\r', '\x2', '\xE', '\x2', '\x19', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '#', '\n', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x4', '\x6', '\x4', '(', '\n', '\x4', '\r', '\x4', 
		'\xE', '\x4', ')', '\x3', '\x5', '\x5', '\x5', '-', '\n', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x38', '\n', '\a', 
		'\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\a', '\n', 
		'\x44', '\n', '\n', '\f', '\n', '\xE', '\n', 'G', '\v', '\n', '\x6', '\n', 
		'I', '\n', '\n', '\r', '\n', '\xE', '\n', 'J', '\x3', '\n', '\x3', '\n', 
		'\x5', '\n', 'O', '\n', '\n', '\x3', '\n', '\a', '\n', 'R', '\n', '\n', 
		'\f', '\n', '\xE', '\n', 'U', '\v', '\n', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x2', '\x2', '\f', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', 
		'\x10', '\x12', '\x14', '\x2', '\x2', '\x2', 'X', '\x2', '\x17', '\x3', 
		'\x2', '\x2', '\x2', '\x4', '\"', '\x3', '\x2', '\x2', '\x2', '\x6', '\'', 
		'\x3', '\x2', '\x2', '\x2', '\b', ',', '\x3', '\x2', '\x2', '\x2', '\n', 
		'\x30', '\x3', '\x2', '\x2', '\x2', '\f', '\x37', '\x3', '\x2', '\x2', 
		'\x2', '\xE', '\x39', '\x3', '\x2', '\x2', '\x2', '\x10', ';', '\x3', 
		'\x2', '\x2', '\x2', '\x12', '=', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'V', '\x3', '\x2', '\x2', '\x2', '\x16', '\x18', '\x5', '\x4', '\x3', 
		'\x2', '\x17', '\x16', '\x3', '\x2', '\x2', '\x2', '\x18', '\x19', '\x3', 
		'\x2', '\x2', '\x2', '\x19', '\x17', '\x3', '\x2', '\x2', '\x2', '\x19', 
		'\x1A', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x1B', '\x3', '\x2', '\x2', 
		'\x2', '\x1B', '\x1C', '\a', '\x2', '\x2', '\x3', '\x1C', '\x3', '\x3', 
		'\x2', '\x2', '\x2', '\x1D', '\x1E', '\x5', '\b', '\x5', '\x2', '\x1E', 
		'\x1F', '\a', '\x6', '\x2', '\x2', '\x1F', ' ', '\x5', '\x6', '\x4', '\x2', 
		' ', '#', '\x3', '\x2', '\x2', '\x2', '!', '#', '\x5', '\b', '\x5', '\x2', 
		'\"', '\x1D', '\x3', '\x2', '\x2', '\x2', '\"', '!', '\x3', '\x2', '\x2', 
		'\x2', '#', '$', '\x3', '\x2', '\x2', '\x2', '$', '%', '\a', '\t', '\x2', 
		'\x2', '%', '\x5', '\x3', '\x2', '\x2', '\x2', '&', '(', '\x5', '\x12', 
		'\n', '\x2', '\'', '&', '\x3', '\x2', '\x2', '\x2', '(', ')', '\x3', '\x2', 
		'\x2', '\x2', ')', '\'', '\x3', '\x2', '\x2', '\x2', ')', '*', '\x3', 
		'\x2', '\x2', '\x2', '*', '\a', '\x3', '\x2', '\x2', '\x2', '+', '-', 
		'\x5', '\f', '\a', '\x2', ',', '+', '\x3', '\x2', '\x2', '\x2', ',', '-', 
		'\x3', '\x2', '\x2', '\x2', '-', '.', '\x3', '\x2', '\x2', '\x2', '.', 
		'/', '\x5', '\n', '\x6', '\x2', '/', '\t', '\x3', '\x2', '\x2', '\x2', 
		'\x30', '\x31', '\a', '\a', '\x2', '\x2', '\x31', '\v', '\x3', '\x2', 
		'\x2', '\x2', '\x32', '\x33', '\x5', '\xE', '\b', '\x2', '\x33', '\x34', 
		'\x5', '\x10', '\t', '\x2', '\x34', '\x38', '\x3', '\x2', '\x2', '\x2', 
		'\x35', '\x38', '\x5', '\xE', '\b', '\x2', '\x36', '\x38', '\x5', '\x10', 
		'\t', '\x2', '\x37', '\x32', '\x3', '\x2', '\x2', '\x2', '\x37', '\x35', 
		'\x3', '\x2', '\x2', '\x2', '\x37', '\x36', '\x3', '\x2', '\x2', '\x2', 
		'\x38', '\r', '\x3', '\x2', '\x2', '\x2', '\x39', ':', '\a', '\x4', '\x2', 
		'\x2', ':', '\xF', '\x3', '\x2', '\x2', '\x2', ';', '<', '\a', '\x5', 
		'\x2', '\x2', '<', '\x11', '\x3', '\x2', '\x2', '\x2', '=', '>', '\x5', 
		'\x14', '\v', '\x2', '>', 'N', '\a', '\x3', '\x2', '\x2', '?', 'O', '\x5', 
		'\n', '\x6', '\x2', '@', 'H', '\a', '\n', '\x2', '\x2', '\x41', '\x45', 
		'\x5', '\n', '\x6', '\x2', '\x42', '\x44', '\a', '\b', '\x2', '\x2', '\x43', 
		'\x42', '\x3', '\x2', '\x2', '\x2', '\x44', 'G', '\x3', '\x2', '\x2', 
		'\x2', '\x45', '\x43', '\x3', '\x2', '\x2', '\x2', '\x45', '\x46', '\x3', 
		'\x2', '\x2', '\x2', '\x46', 'I', '\x3', '\x2', '\x2', '\x2', 'G', '\x45', 
		'\x3', '\x2', '\x2', '\x2', 'H', '\x41', '\x3', '\x2', '\x2', '\x2', 'I', 
		'J', '\x3', '\x2', '\x2', '\x2', 'J', 'H', '\x3', '\x2', '\x2', '\x2', 
		'J', 'K', '\x3', '\x2', '\x2', '\x2', 'K', 'L', '\x3', '\x2', '\x2', '\x2', 
		'L', 'M', '\a', '\v', '\x2', '\x2', 'M', 'O', '\x3', '\x2', '\x2', '\x2', 
		'N', '?', '\x3', '\x2', '\x2', '\x2', 'N', '@', '\x3', '\x2', '\x2', '\x2', 
		'O', 'S', '\x3', '\x2', '\x2', '\x2', 'P', 'R', '\a', '\b', '\x2', '\x2', 
		'Q', 'P', '\x3', '\x2', '\x2', '\x2', 'R', 'U', '\x3', '\x2', '\x2', '\x2', 
		'S', 'Q', '\x3', '\x2', '\x2', '\x2', 'S', 'T', '\x3', '\x2', '\x2', '\x2', 
		'T', '\x13', '\x3', '\x2', '\x2', '\x2', 'U', 'S', '\x3', '\x2', '\x2', 
		'\x2', 'V', 'W', '\a', '\a', '\x2', '\x2', 'W', '\x15', '\x3', '\x2', 
		'\x2', '\x2', '\v', '\x19', '\"', ')', ',', '\x37', '\x45', 'J', 'N', 
		'S',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
